// QuCoSi - Quantum Computer Simulation
// Copyright Â© 2009 Frank S. Thomas <frank@blue-dwarf.de>
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

#ifndef QUCOSI_AUX_H
#define QUCOSI_AUX_H

#include <limits>

#include <Eigen/Core>

#ifndef M_PI
#define M_PI 3.14159265358979323846 /* pi */
#endif

#ifndef M_SQRT1_2
#define M_SQRT1_2 0.70710678118654752440 /* 1/sqrt(2) */
#endif

namespace QuCoSi {

typedef double fptype;
typedef std::complex<fptype> field;
typedef Eigen::Matrix<field, Eigen::Dynamic, 1> VectorXc;
typedef Eigen::Matrix<field, Eigen::Dynamic, Eigen::Dynamic> MatrixXc;

/** \brief Checks if \p x is approximately zero
  *
  * \return true if \p x is approximately zero
  */
inline bool is_zero(const fptype x)
{
  return std::abs(x) <= std::numeric_limits<fptype>::epsilon();
}

/** \brief Checks if \p x is approximately one
  *
  * \return true if \p x is approximately one
  */
inline bool is_one(const fptype x)
{
  return is_zero(x-1.);
}

/** \brief Computes the binary logarithm of the integer \p value
  *
  * \return the binary logarithm of \p value and -1 if \p value == 0
  */
inline int log2(const unsigned value)
{
  unsigned l = 0;
  while ((value >> l) != 0) {
    ++l;
  }
  return l-1;
}

/** \brief Computes the modulo-2 sum of the products of corresponding bits of
  *        the integers \p x and \p y
  *
  * Let \p x and \p y be positive integers and \f$x_i, y_i\f$ are the bits
  * of \p x and \p y in the binary numeral system (that is \f$x = \sum_{i=0}^n
  * x_i \, 2^i \f$), then this function computes the modulo-2 sum of the
  * products of corresponding bits of \p x and \p y denoted by \f$x \cdot y\f$:
  * \f[
  *   x \cdot y = \bigoplus_{i=0}^n x_i \, y_i
  *     = x_0 \, y_0 \oplus x_1 \, y_1 \oplus \ldots \oplus x_n \, y_n \ .
  * \f]
  *
  * \return the modulo-2 sum of the products of corresponding bits of \p x
  *         and \p y
  */
inline int bwise_bin_dot(const long x, const long y)
{
  long a = (x & y);
  // Count the number of set bits in a.
  unsigned int c = 0;
  for (; a; ++c) {
    a &= a-1;
  }
  // Return the parity of a.
  return c%2;
}

} // namespace QuCoSi

#endif // QUCOSI_AUX_H

// vim: filetype=cpp shiftwidth=2 textwidth=78
